---
title: "Enhance Your Data Science Workflow with the box R Package"
author: "Alier Reng"
date: "04/16/2023"
format: html
editor: visual
---

## Tutorial on Utilizing the Box R Package Effectively

This tutorial demonstrates how to incorporate the box R package into your data science workflow effectively 🖥️.

## Outline of this Tutorial

1.  What is box?

> 'box' allows organising R code in a more modular way, via two mechanisms:
>
> 1.  It enables *writing modular code* by treating files and folders of R code as independent (potentially nested) modules, without requiring the user to wrap reusable code into packages.
>
> 2.  It provides a new syntax to import reusable code (both from packages and from modules) which is more powerful and less error-prone than **`library`** or **`require`**, by limiting the number of names that are made available.
>     ([The Box R Package](https://morioh.com/p/9a313401f051))

2.  Loading the Package

    option + command + i

```{r}
#| warning: false
#| message: false

# Libraries
# library(tidyverse)
box::use(
  dplyr[...], 
  purrr[...], 
  tidyr[...], 
  stringr[str_remove_all],
  readxl[read_xlsx]
)

```

2.  Importing the Dataset

```{r}
# Importing the dataset
file_path <- list.files(
  "../00-input/excel_files/", 
  pattern = "[.]xlsx$", 
  full.names = TRUE
)

census <- file_path |>
  
  map(read_xlsx) |> 
  list_rbind() |> 
  
  # Select columns of interest
  janitor::clean_names() |> 
  select(
    former_region, 
    state = region_name,
    gender = variable_name,
    age_category = age_name,
    population = x2008
  ) |>
  
  fill(
    former_region, .direction = "down"
  ) |> 
  
  # Transform column values
  # mutate(
  #   gender = str_remove_all(gender, "Population, | \\(Number\\)")
  # ) |> 
  separate_wider_delim(
    gender,
    delim = " ",
    names = c("other", "gender"),too_many = "drop"
  ) |> 
  
  # Remove unwanted rows
  filter(
    !(gender == "Total" | age_category == "Total")
  ) |> 
  
  mutate(
    age_category = case_when(
      age_category %in% c("0 to 4", "5 to 9", "10 to 14")     ~ "0-14",
      age_category %in% c("15 to 19", "20 to 24", "25 to 29") ~ "15-29",
      age_category %in% c("30 to 34", 
                          "35 to 39", 
                          "40 to 44", 
                          "45 to 49"
                          )                                   ~ "30-49",
      age_category %in% c("50 to 54", "55 to 59", "60 to 64") ~ "50-64",
      TRUE ~ "65+"
    )
  ) |> 
  
  # Grouping and summarization
  summarize(
    total = sum(population),
    .by = c(former_region, state, gender, age_category)
  )
```

2.  Writing a Function

    ```{r}
    # Source the function
    box::use(../R/clean)

    file_path <- list.files(
      "../00-input/excel_files/", 
      pattern = "[.]xlsx$", 
      full.names = TRUE
    )

    # Clean and trnsform the dataset
    df <- 
      clean$tweak_census(
        
        # Add files path
        path = file_path, 
        
        # Pattern to remove
        pattern = "Population, | \\(Number\\)", 
        
        # Rows to exclude
        condition = !(gender == "Total" | age_category == "Total"),
        
        # Columns to group by
        group_var = c(former_region, state, gender, age_category),
        
        # Columns of interes
        c(former_region, 
          state = region_name, 
          gender = variable_name, 
          age_category = age_name, 
          population = x2008
          )
      )
    ```

3.  Grouping and Summarization

```{r}
# Compute totals by state, gender, or age category
state <- 
  
  # Calculate summaries
  clean$calc_totals(
    df, 
    group_var = c(state)
  )
```

2.  Conclusion
